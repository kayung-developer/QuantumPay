import React, { useState, useEffect } from 'react';
import { View, Text, SafeAreaView, Pressable, Alert, ScrollView } from 'react-native';
import { styled } from 'nativewind';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { ProfileStackParamList } from '../../navigation/ProfileNavigator';
import { useApiPost } from '../../hooks/useApi';
import { useAppStore } from '../../store/authStore';
import { Formik } from 'formik';
import * as Yup from 'yup';
import QRCode from 'react-native-qrcode-svg';
import Spinner from '../../components/common/Spinner';
import StyledButton from '../../components/common/StyledButton';
import StyledTextInput from '../../components/common/StyledTextInput';
import { CheckCircleIcon } from 'react-native-heroicons/solid';

const StyledSafeAreaView = styled(SafeAreaView);
const StyledView = styled(View);
const StyledText = styled(Text);
const StyledScrollView = styled(ScrollView);

type Props = NativeStackScreenProps<ProfileStackParamList, 'TwoFactorSetup'>;

const TwoFactorSetupScreen = ({ navigation }: Props) => {
    const [step, setStep] = useState(1); // 1: Start, 2: Verify, 3: Success
    const [setupData, setSetupData] = useState<{ otp_uri: string; recovery_codes: string[] } | null>(null);
    const { post: start2FA, loading: starting } = useApiPost('/users/2fa/enable');
    const { post: verify2FA, loading: verifying } = useApiPost('/users/2fa/verify');
    const fetchDbUser = useAppStore(state => state.fetchAppData); // To refresh user state

    // When the screen loads, immediately try to start the 2FA setup process
    useEffect(() => {
        const handleStart = async () => {
            const result = await start2FA({});
            if (result.success) {
                setSetupData(result.data);
                setStep(2); // Move to verification step
            } else {
                Alert.alert("Error", "Could not start the 2FA setup process. Please try again.");
                navigation.goBack();
            }
        };
        handleStart();
    }, []);

    const handleVerify = async (values: { totp_code: string }) => {
        const result = await verify2FA(values);
        if (result.success) {
            setSetupData(prev => ({ ...prev, recovery_codes: result.data.recovery_codes }));
            setStep(3); // Move to success step
            fetchDbUser(); // Refresh global state to reflect 2FA is enabled
        } else {
            Alert.alert("Verification Failed", "The code you entered is incorrect. Please try again.");
        }
    };

    const renderContent = () => {
        if (step === 1 || starting) {
            return <View className="flex-1 justify-center items-center"><Spinner /><Text className="text-neutral-400 mt-4">Generating secure key...</Text></View>;
        }

        if (step === 2 && setupData) {
            return (
                <StyledScrollView contentContainerStyle={{ padding: 24 }}>
                    <StyledText className="text-white text-xl font-bold">Scan QR Code</StyledText>
                    <StyledText className="text-neutral-400 mt-2 mb-6">Use an authenticator app (like Google Authenticator, Authy, or 1Password) to scan the code below.</StyledText>
                    <StyledView className="bg-white p-4 rounded-lg self-center">
                        <QRCode value={setupData.otp_uri} size={200} />
                    </StyledView>

                    <StyledText className="text-white text-xl font-bold mt-8">Verify Setup</StyledText>
                    <StyledText className="text-neutral-400 mt-2 mb-6">Enter the 6-digit code generated by your authenticator app to complete the setup.</StyledText>

                    <Formik
                        initialValues={{ totp_code: '' }}
                        validationSchema={Yup.object().shape({ totp_code: Yup.string().matches(/^[0-9]{6}$/, 'Must be a 6-digit code').required('Code is required') })}
                        onSubmit={handleVerify}
                    >
                        {({ handleSubmit, ...formikProps }) => (
                            <View>
                                <StyledTextInput label="6-Digit Verification Code" keyboardType="numeric" maxLength={6} {...formikProps} name="totp_code" />
                                <StyledView className="mt-8">
                                    <StyledButton label="Verify & Enable 2FA" onPress={handleSubmit} isLoading={verifying} />
                                </StyledView>
                            </View>
                        )}
                    </Formik>
                </StyledScrollView>
            );
        }

        if (step === 3 && setupData) {
             return (
                 <StyledView className="p-6 items-center justify-center flex-1">
                    <CheckCircleIcon size={64} color="#2DD4BF" />
                    <StyledText className="text-white text-2xl font-bold mt-4">2FA Enabled!</StyledText>
                    <StyledText className="text-yellow-400 mt-6 text-center font-semibold">Please save these recovery codes!</StyledText>
                    <StyledText className="text-neutral-400 mt-2 text-center">Store them in a secure place, like a password manager. They are the only way to access your account if you lose your 2FA device.</StyledText>
                    <StyledView className="p-4 bg-neutral-800 rounded-lg font-mono text-white space-y-2 my-4 w-full">
                        {setupData.recovery_codes.map(code => <StyledText key={code} className="text-center">{code}</StyledText>)}
                    </StyledView>
                    <StyledButton label="Done" onPress={() => navigation.goBack()} />
                </StyledView>
            );
        }
    };

    return (
        <StyledSafeAreaView className="flex-1 bg-neutral-950">
            {renderContent()}
        </StyledSafeAreaView>
    );
};

export default TwoFactorSetupScreen;
